#Subset sum

def isSubset(arr,sum,n):
    if(sum==0):
        return True
    if(n==0):
        return False
    
    if(arr[n-1]>sum):
        return isSubset(arr,sum,n-1)


    return(isSubset(arr,sum-arr[n-1],n-1) or isSubset(arr,sum,n-1))

#Memoization
rows, cols = (2000, 2000)
t = [[-1]*cols]*rows

    
def isSubsetMemo(arr,sum,n):

    if(sum==0):
        return True
    if(n==0):
        return False
    
    if(t[n-1][sum]!=-1):
        return(t[n-1][sum])

    if(arr[n-1]>sum):
        t[n-1][sum] = isSubsetMemo(arr,sum,n-1)
        return (t[n-1][sum])
    else:
        t[n-1][sum]=isSubsetMemo(arr,sum-arr[n-1],n-1) or isSubsetMemo(arr,sum,n-1)
        return(t[n-1][sum])  


# DP 

def isSubsetDP(arr,sum,n):

    rows=len(arr)+1
    cols=sum+1
    [[False for i in range(cols)]for j in range(rows)]

    for i in range(n+1):
        t[i][0]=True
    for i in range(1,n+1):
        t[0][i]=False

    for i in range(1,n+1):
        for j in range(1,sum+1):
            if arr[i-1]>j:
                t[i][j]=t[i-1][j]

            if arr[i-1]<=j:
                t[i][j]=t[i-1][j-arr[i-1]] or t[i-1][j]
                
    return t[n][sum]
      

arr=[2,3,7,8,10]
sum=21
n=len(arr)

if(isSubsetDP(arr,sum,n)==True):
    print("Found")
else:
    print("not found")


